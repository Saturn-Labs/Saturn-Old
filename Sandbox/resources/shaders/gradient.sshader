program:
    version: "330 core"
    global: "#define PI 3.14159265"
    vertex:
        layout(location = 0) in vec3 a_Position;
        out vec3 v_Position;

        uniform mat4 u_ViewProjection;
        uniform mat4 u_Transformation;

        void vert() 
        {
            v_Position = a_Position;
            gl_Position = u_ViewProjection * u_Transformation * vec4(a_Position, 1.0);
        }
    :vertex
    fragment:
        layout(location = 0) out vec4 final_Color;
        in vec3 v_Position;

        uniform vec4 u_TintColor;
        uniform vec2 u_Resolution;
        uniform float u_Time;

        void frag() 
        {
            vec2 pos = gl_FragCoord.xy / u_Resolution.xy;
            pos.y = pos.y * 2.0 - 1.0;
                
            float amplitude = abs(sin(u_Time));
            float frequency = 0.5 + 5.0 * sin(u_Time) * sin(u_Time);
            float phase = 10.0 * u_Time;
            
            vec3 colour = vec3(0.0);
            float x = 2.0*PI*frequency*pos.x + phase;
            float val = amplitude * sin(x);
            float delta = abs(val-pos.y);

            float thickness = 0.06 + 0.04 * frequency * abs(cos(x));
            colour.g = min(1.0-(1.0/thickness)*delta, 1.0);
            
            final_Color = vec4(colour,1.0) * u_TintColor;
        }
    :fragment
:program